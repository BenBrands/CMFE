#include <boost/preprocessor/list/for_each.hpp>
#include <boost/preprocessor/list/for_each_product.hpp>
#include <boost/preprocessor/tuple/elem.hpp>
#include <boost/preprocessor/tuple/to_list.hpp>


#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/text_oarchive.hpp>
#include <boost/archive/binary_iarchive.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/mpi/packed_iarchive.hpp>
#include <boost/mpi/packed_oarchive.hpp>


// List of feasible dimensions 
#define Dimensions \
BOOST_PP_TUPLE_TO_LIST( 2, (2, 3) )

// List of Archive types
#define Archives \
BOOST_PP_TUPLE_TO_LIST( 6, (boost::archive::text_iarchive, \
							boost::archive::binary_iarchive, \
							boost::archive::text_oarchive, \
							boost::archive::binary_oarchive, \
							boost::mpi::packed_iarchive, \
							boost::mpi::packed_oarchive ) )

// List of input Archive types
#define Archives_input \
BOOST_PP_TUPLE_TO_LIST( 3, (boost::archive::text_iarchive, \
							boost::archive::binary_iarchive, \
							boost::mpi::packed_iarchive) )

// List of output Archive types
#define Archives_output \
BOOST_PP_TUPLE_TO_LIST( 3, (boost::archive::text_oarchive, \
							boost::archive::binary_oarchive, \
							boost::mpi::packed_oarchive) )



# define Class_instantiation(R, _, T) \
template class ConstitutiveLaws::BaseMaterial<T>;

BOOST_PP_LIST_FOR_EACH(Class_instantiation, _, Dimensions)



// Macro for explicit instantiation of serialize member function
#define Instantiate_serialize(R,L) \
template void ConstitutiveLaws::BaseMaterial<BOOST_PP_TUPLE_ELEM(2,0,L)>::serialize( BOOST_PP_TUPLE_ELEM(2,1,L) &, const unsigned int);

//explicit instantiation of save functions
BOOST_PP_LIST_FOR_EACH_PRODUCT(Instantiate_serialize, 2, (Dimensions,Archives))



#undef Dimensions
#undef Archives
#undef Archives_input
#undef Archives_output
#undef Class_instantiation
#undef Instantiate_serialize