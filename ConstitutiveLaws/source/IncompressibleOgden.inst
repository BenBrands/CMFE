#include <boost/preprocessor/list/for_each.hpp>
#include <boost/preprocessor/list/for_each_product.hpp>
#include <boost/preprocessor/tuple/elem.hpp>
#include <boost/preprocessor/tuple/to_list.hpp>


#include <boost/archive/text_iarchive.hpp>
#include <boost/archive/text_oarchive.hpp>
#include <boost/archive/binary_iarchive.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/mpi/packed_iarchive.hpp>
#include <boost/mpi/packed_oarchive.hpp>


// List of feasible dimensions 
#define Dimensions \
BOOST_PP_TUPLE_TO_LIST( 2, (2, 3) )

// List of Archive types
#define Archives \
BOOST_PP_TUPLE_TO_LIST( 6, (boost::archive::text_iarchive, \
							boost::archive::binary_iarchive, \
							boost::archive::text_oarchive, \
							boost::archive::binary_oarchive, \
							boost::mpi::packed_iarchive, \
							boost::mpi::packed_oarchive ) )

// List of input Archive types
#define Archives_input \
BOOST_PP_TUPLE_TO_LIST( 3, (boost::archive::text_iarchive, \
							boost::archive::binary_iarchive, \
							boost::mpi::packed_iarchive) )

// List of output Archive types
#define Archives_output \
BOOST_PP_TUPLE_TO_LIST( 3, (boost::archive::text_oarchive, \
							boost::archive::binary_oarchive, \
							boost::mpi::packed_oarchive) )



# define Class_instantiation(R, _, T) \
template class ConstitutiveLaws::IncompressibleOgden<T>;

BOOST_PP_LIST_FOR_EACH(Class_instantiation, _, Dimensions)



// Macro for explicit instantiation of save member function
#define Instantiate_save(R,L) \
template void ConstitutiveLaws::IncompressibleOgden<BOOST_PP_TUPLE_ELEM(2,0,L)>::save( BOOST_PP_TUPLE_ELEM(2,1,L) &, const unsigned int) const;

//explicit instantiation of save function
BOOST_PP_LIST_FOR_EACH_PRODUCT(Instantiate_save, 2, (Dimensions,Archives_output))



// Macro for explicit instantiation of load member function
#define Instantiate_load(R,L) \
template void ConstitutiveLaws::IncompressibleOgden<BOOST_PP_TUPLE_ELEM(2,0,L)>::load( BOOST_PP_TUPLE_ELEM(2,1,L) &, const unsigned int);

//explicit instantiation of load function
BOOST_PP_LIST_FOR_EACH_PRODUCT(Instantiate_load, 2, (Dimensions,Archives_input))



namespace boost
{
namespace serialization
{
	// Macro for explicit instantiation of save_construct_data
	#define Save_construct_data(R,L) \
	template void save_construct_data( BOOST_PP_TUPLE_ELEM(2, 0, L) &, \
									   const ConstitutiveLaws::IncompressibleOgden<BOOST_PP_TUPLE_ELEM(2, 1, L)> *, \
									   const unsigned int);
									   
	// explicit instantiation of function save_construct_data for different archives dimensions
	BOOST_PP_LIST_FOR_EACH_PRODUCT(Save_construct_data, 2, (Archives_output,Dimensions))
	
	
	
	// Macro for explicit instantiation of load_construct_data
	#define Load_construct_data(R,L) \
	template void load_construct_data ( BOOST_PP_TUPLE_ELEM(2, 0, L) &, \
										ConstitutiveLaws::IncompressibleOgden<BOOST_PP_TUPLE_ELEM(2, 1, L)> *, \
										const unsigned int);
	
	//explicit instantiation of function load_construct_data for different archives and dimensions
	BOOST_PP_LIST_FOR_EACH_PRODUCT(Load_construct_data, 2, (Archives_input,Dimensions))
	    	    
}//namespace serialization
}// namespace boost



#undef Dimensions
#undef Archives
#undef Archives_input
#undef Archives_output
#undef Class_instantiation
#undef Instantiate_save
#undef Instantiate_load
#undef Save_construct_data
#undef Load_construct_data
